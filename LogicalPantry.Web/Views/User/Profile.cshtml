@model LogicalPantry.DTOs.UserDtos.UserDto
@using System.Security.Claims;
@{
    ViewData["Title"] = "Create Tenant";
    var tenantName = ViewBag.TenantName as string;

}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/4.5.2/css/bootstrap.min.css">
    <link href="~/css/StyleSheet.css" />
    <link rel="stylesheet" href="~/css/StyleSheet.css">
    <style>
        body {
            margin: 0;
            padding: 0;
            /* overflow: hidden; */
        }

        .container-fluid.header-container {
            max-height: 60px; /* Limit header height */
            overflow: hidden; /* Hide overflow */
            padding: 0; /* Remove padding */
        }

        /* .registration-container {
                    max-height: calc(100vh - 60px); /* Adjust based on header height */
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0;
        padding: 0;
        }

        */

        .card {
            width: 100%;
            max-width: 900px; /* Adjusted card width for better responsiveness */
            margin-top: 1rem;
            margin-bottom: 0;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); /* Added subtle shadow */
        }

        .card-body {
            padding: 0;
            box-sizing: border-box;
        }

        .card-header {
            text-align: center;
            font-weight: 500;
            padding: 1rem;
            margin: 0;
            height: 60px;
        }

        .form-container {
            padding: 0.5rem;
        }

        .row {
            margin-bottom: 1rem;
        }

        .form-group {
            margin-bottom: 1rem;
        }

            .form-group label {
                display: block;
                margin-bottom: 0.5rem;
            }

            .form-group .form-control {
                width: 100%;
            }

        .saveButton {
            background-color: #1A2A52;
            color: white;
            border-radius: 5px;
            border: none;
            font-size: 1rem;
            padding: 0.5rem 2rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        #saveButtonDiv {
            display: flex;
            justify-content: flex-end;
            margin-top: 1rem;
        }

        .checkbox-inline {
            margin-right: 1rem;
            margin-top: 0.2rem;
        }

        @@media (max-width: 768px) {
            .card {
                flex-direction: column;
                max-width: 100%; /* Ensure card takes full width on small screens */
            }

            .form-container {
                padding: 1rem;
            }
        }

        .nav-fixed #layoutSidenav #layoutSidenav_nav .sidenav {
            padding-top: 0;
        }

        .nav-fixed #layoutSidenav #layoutSidenav_content {
            padding-left: 0rem;
            top: 3.625rem;
        }

        #layoutSidenav_content {
            margin-bottom: -3%;
        }

        .page-header-compact .page-header-content {
            padding: 0;
            padding-top: 10px;
        }

        .card-header {
            width: 100%;
            padding: 0;
            display: flex;
            align-items: center;
            padding-left: 3%;
        }

        form {
            padding: 1%;
        }

        .form-group .form-control {
            width: 100%; /* Ensure the text boxes take up the full width available */

            font-size: 1rem; /* Increase font size for better readability */
        }

        .form-check {
            display: flex;
            align-items: center;
        }

        .form-check-input {
            margin-right: 0.5rem; /* Adjust spacing between checkbox and label */
            width: 1rem; /* Smaller checkbox size */
            height: 1rem; /* Smaller checkbox size */
        }

        .checkbox-inline {
            margin-right: 1rem;
            margin-top: 0.2rem;
        }

        .nav-fixed #layoutSidenav #layoutSidenav_content {
            padding-left: 0rem;
            top: 0.5rem;
        }

        .registration-container {
            max-height: calc(100vh - 60px);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0;
            padding: 0;
            max-height: 5%;
            width: 100%;
        }

        .col-md-6.right-column {
            margin-top: 0.8rem; /* Adjust this value as needed */
        }


    </style>
</head>
<body>
    <div class="registration-container">
        <div class="card mb-4">
            <div class="card-body">
                <div class="card-header">
                    Profile
                </div>
                @if (!string.IsNullOrEmpty(TempData["SuccessMessageUser"] as string))
                {
                    <div id="successMessageUser" class="alert @TempData["MessageClass"]">
                        @TempData["SuccessMessageUser"]
                    </div>
                }

                @if (!string.IsNullOrEmpty(TempData["ErrorMessageUser"] as string))
                {
                    <div id="errorMessageUser" class="alert @TempData["MessageClass"]">
                        @TempData["ErrorMessageUser"]
                    </div>
                }

                <form method="post" id="profile" action="/@tenantName/User/Profile">
                    <div class="form-container">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @{
                                        var userName = User.FindFirstValue(ClaimTypes.Name);

                                    }
                                    <label for="FullName">Name<span class="mandatory">*</span></label>
                                    <input name="FullName" class="form-control" value="@Model.FullName" id="FullName" placeholder="Enter Name" />
                                    <input type="hidden" name="FullName" value="@Model.FullName" />
                                    <span class="text-danger errorfont" id="FullName-error"></span>
                                </div>
                                <div class="form-group">
                                    <label for="Address">Address<span class="mandatory">*</span></label>
                                    <input name="Address" class="form-control" id="Address" value="@Model.Address" placeholder="Enter Address" />
                                    <span class="text-danger errorfont" id="Address-error"></span>
                                </div>
                                <div class="form-group">
                                    @{
                                        var userEmails = User.FindFirstValue(ClaimTypes.Email);
                                    }
                                    <label for="Email">Email<span class="mandatory">*</span></label>
                                    <input type="email" name="Email" value="@Model.Email" class="form-control" id="Email" placeholder="Enter Email" disabled />
                                    <input type="hidden" name="Email" value="@Model.Email" />
                                    <span class="text-danger errorfont" id="Email-error"></span>
                                </div>
                                <div class="form-group">
                                    <label for="PhoneNumber">Phone Number<span class="mandatory">*</span></label>
                                    <input type="tel" name="PhoneNumber" class="form-control" id="PhoneNumber" value="@Model.PhoneNumber" placeholder="Enter Phone Number" />
                                    <span class="text-danger errorfont" id="PhoneNumber-error"></span>
                                </div>

                                <div class="form-group">
                                <label asp-for="EmploymentStatus">Employment Status</label>
                                <select asp-for="EmploymentStatus" class="form-control">
                                <option value="">Select Employment Status</option>
                                <option value="Student">Student</option>
                                <option value="Employed">Employed</option>
                                <option value="Unemployed - Looking">Unemployed - Looking</option>
                                <option value="Unemployed - Not Looking">Unemployed - Not Looking</option>
                                <option value="Retired">Retired</option>
                                <option value="Unable to Work/Disabled">Unable to Work/Disabled</option>
                                </select>
                                <span asp-validation-for="EmploymentStatus" class="text-danger"></span>
                                </div>


                                <div class="form-group">
                                <label for="IsMarried">Is Married</label>
                                <div class="form-check-inline">
                                <input type="radio" name="IsMarried" value="true" class="form-check-input" id="IsMarriedYes" @(Model.IsMarried == true ? "checked" : "") />
                                <label class="form-check-label" for="IsMarriedYes">Yes</label>
                                </div>
                                <div class="form-check-inline">
                                <input type="radio" name="IsMarried" value="false" class="form-check-input" id="IsMarriedNo" @(Model.IsMarried == false ? "checked" : "") />
                                <label class="form-check-label" for="IsMarriedNo">No</label>
                                </div>
                                <span class="text-danger" id="IsMarried-error"></span>
                                </div>



                                </div>
                              <div class="col-md-6 right-column" ">
                                <div class="form-group">
                                <label for="ProfilePictureUrl">Profile Picture</label>
                                <input type="file" name="ProfilePictureUrl" value="@Model.ProfilePictureUrl" id="ProfilePictureUrl" />
                                <span class="text-danger" id="ProfilePictureUrl-error"></span>
                                </div>
                             

                                <div class="form-group">
                                <label for="HouseholdSize">Household Size</label>
                                <input type="number" name="HouseholdSize" class="form-control" value="@Model.HouseholdSize" id="HouseholdSize" placeholder="Number in Household" />
                                <span class="text-danger" id="HouseholdSize-error"></span>
                                </div>



                                <div class="form-group">
                                <label for="DateOfBirth">Birth Date (MM/YYYY)</label>
                                <input type="text" name="DateOfBirth" class="form-control"
                                value="@(Model.DateOfBirth.HasValue ? Model.DateOfBirth.Value.ToString("MM/yyyy") : "")"
                                id="DateOfBirth" placeholder="MM/YYYY" required />
                                <span class="text-danger" id="DateOfBirth-error"></span>
                                </div>



                                <div class="form-group">
                                <label for="ZipCode">Zip Code</label>
                                <input name="ZipCode" class="form-control" id="ZipCode"  value="@Model.ZipCode" placeholder="Enter Zip Code" />
                                <span class="text-danger" id="ZipCode-error"></span>
                                </div>

                                <div class="form-group">

                                <!-- Veteran Status Field -->
                                  <div class="form-group">
                                   <label for="IsVeteran">Veteran Status</label>
                                    <div class="form-check-inline">
                                            <input type="radio" name="IsVeteran" value="true" class="form-check-input" id="isVeteranYes" @(Model.IsVeteran == true ? "checked" : "") />
                                    <label class="form-check-label" for="isVeteranYes">Yes</label>
                                    </div>
                                    <div class="form-check-inline">
                                            <input type="radio" name="IsVeteran" value="false" class="form-check-input " id="isVeteranNo" @(Model.IsVeteran == false ? "checked" : "") />
                                    <label class="form-check-label" for="isVeteranNo">No</label>
                                    </div>
                                    <span class="text-danger" id="isVeteran-error"></span>
                                  </div>

                                <div class="form-group">
                                <label for="HasSchoolAgedChildren">Has School Aged Children</label>
                                <div class="form-check-inline">
                                <input type="radio" name="HasSchoolAgedChildren" value="true" class="form-check-input" id="HasSchoolAgedChildrenYes" @(Model.HasSchoolAgedChildren == true ? "checked" : "") />
                                <label class="form-check-label" for="HasSchoolAgedChildrenYes">Yes</label>
                                </div>
                                <div class="form-check-inline">
                                <input type="radio" name="HasSchoolAgedChildren" value="false" class="form-check-input" id="HasSchoolAgedChildrenNo" @(Model.HasSchoolAgedChildren == false ? "checked" : "") />
                                <label class="form-check-label" for="HasSchoolAgedChildrenNo">No</label>
                                </div>
                                <span class="text-danger" id="HasSchoolAgedChildren-error"></span>
                                </div>



                           </div>
                         

                            <div id="saveButtonDiv">
                                <button class="saveButton" type="submit" onclick="return validateForm();">Save</button>
                            </div>
                </form>
              </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        $(document).ready(function () {
            // Hide error messages initially when input fields are interacted with
            $('#FullName, #Address, #Email, #PhoneNumber, #ZipCode, #HouseholdSize, #DateOfBirth').on('input', function () {
                $(this).next('.text-danger').hide();
            });

            // Fade in and out success and error messages
            if ($('#successMessageUser').length) {
                $('#successMessageUser').fadeIn().delay(2000).fadeOut();
            }

            if ($('#errorMessageUser').length) {
                $('#errorMessageUser').fadeIn().delay(2000).fadeOut();
            }

            $('#ProfilePictureUrl').on('change', function () {
                var file = this.files[0];
                var reader = new FileReader();

                reader.onload = function (e) {
                    $('#ProfilePicturePreview').attr('src', e.target.result).show();
                };

                if (file) {
                    reader.readAsDataURL(file);
                } else {
                    $('#ProfilePicturePreview').hide();
                }
            });
        });

        function validateForm() {
            let isValid = true;

            // Validate FullName
            var fullName = document.getElementById('FullName').value.trim();
            if (fullName === '') {
                document.getElementById('FullName-error').innerText = 'Full Name is required.';
                isValid = false;
            } else {
                document.getElementById('FullName-error').innerText = '';
            }

            // Validate Address
            var address = document.getElementById('Address').value.trim();
            if (address === '') {
                document.getElementById('Address-error').innerText = 'Address is required.';
                isValid = false;
            } else {
                document.getElementById('Address-error').innerText = '';
            }

            // Validate Email
            var email = document.getElementById('Email').value.trim();
            if (email === '') {
                document.getElementById('Email-error').innerText = 'Email is required.';
                isValid = false;
            } else if (!validateEmail(email)) {
                document.getElementById('Email-error').innerText = 'Invalid email format.';
                isValid = false;
            } else {
                document.getElementById('Email-error').innerText = '';
            }

            // Validate PhoneNumber
            var phoneNumber = document.getElementById('PhoneNumber').value.trim();
            if (phoneNumber === '') {
                document.getElementById('PhoneNumber-error').innerText = 'Phone Number is required.';
                isValid = false;
            } else {
                document.getElementById('PhoneNumber-error').innerText = '';
            }

            // Validate DateOfBirth
            var dateOfBirth = document.getElementById('DateOfBirth').value.trim();
            if (dateOfBirth === '') {
                document.getElementById('DateOfBirth-error').innerText = 'Date of Birth is required.';
                isValid = false;
            } else {
                document.getElementById('DateOfBirth-error').innerText = '';
            }

            return isValid;
        }

       


    </script>
</body>
</html>