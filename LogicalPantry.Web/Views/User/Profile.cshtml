@model LogicalPantry.DTOs.UserDtos.UserDto
@using System.Security.Claims;
@{
    ViewData["Title"] = "Create Tenant";
    var tenantName = ViewBag.TenantName as string;

}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/4.5.2/css/bootstrap.min.css">
    <link href="~/css/StyleSheet.css" />
    <link rel="stylesheet" href="~/css/StyleSheet.css">
    <style>
        body {
            margin: 0;
            padding: 0;
            overflow-x: hidden;
        }

        .container-fluid.header-container {
            max-height: 60px;
            overflow: hidden;
            padding: 0;
        }

        .card {
            width: 100%;
            max-width: 900px;
            margin-top: 1rem;
            margin-bottom: 0;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }


        .card-body {
            padding: 0;
            box-sizing: border-box;
        }

        .card-header {
            text-align: center;
            font-weight: 500;
            padding: 1rem;
            height: 60px;
        }

        .form-container {
            padding: 0.5rem;
            padding-bottom: 20px;
            padding-right: 20px;
            padding-top: 20px;
            padding-left: 20px;
        }

        .row {
            margin-bottom: 1rem;
        }

        .form-group {
            margin-bottom: 1rem;
        }

            .form-group label {
                display: block;
                margin-bottom: 0.5rem;
            }

            .form-group .form-control {
                width: 100%;
            }

        .saveButton {
            background-color: #1A2A52;
            color: white;
            border-radius: 5px;
            border: none;
            font-size: 1rem;
            padding: 0.5rem 2rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        #saveButtonDiv {
            display: flex;
            justify-content: flex-end;
            margin-top: 1rem;
        }

        .checkbox-inline {
            margin-right: 1rem;
            margin-top: 0.2rem;
        }

        .registration-container {
            display: flex;
            justify-content: center;
            margin-right: 100px;
        }

        /* Responsive Styles */
        @@media (max-width: 768px) {
            .card {
                max-width: 100%;
                margin-top: 0.5rem;
            }

            .form-container {
                padding: 1rem;
            }

            .profile-picture-container {
                flex-direction: column;
                align-items: center;
            }

            .file-input-container {
                flex-direction: column;
                align-items: center;
            }

            .form-group label {
                font-size: 0.875rem; /* Slightly smaller label font on smaller screens */
            }

            .form-group .form-control {
                font-size: 0.875rem; /* Slightly smaller input font on smaller screens */
            }

            .saveButton {
                font-size: 0.875rem;
                padding: 0.5rem 1.5rem;
            }

            #saveButtonDiv {
                justify-content: center;
            }

            .right-column {
                margin-top: 1rem;
            }
        }

        @@media (max-width: 576px) {
            .card-header {
                font-size: 1rem;
                height: auto;
                padding: 0.5rem;
            }

            .form-group label {
                font-size: 0.75rem; /* Smaller label font on extra small screens */
            }

            .form-group .form-control {
                font-size: 0.75rem; /* Smaller input font on extra small screens */
            }

            .saveButton {
                font-size: 0.75rem;
                padding: 0.5rem 1rem;
            }
        }


        .profile-picture-container {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }

            .profile-picture-container label {
                margin-bottom: 5px; /* Reduced space below the label */
            }

        .file-input-container {
            display: flex;
            align-items: center;
            gap: 1px; /* Space between file input and profile picture */
            min-height: 6.5vh;
        }

            .file-input-container img {
                max-height: 62px;
                object-fit: cover;
                border-radius: 40%;
                border: 2px solid #ddd;
            }

        .form-control-file {
            margin-right: 10px; /* Space between file input and image */
        }

        /*  .layoutSidenav_content {
                    padding-top: 0;
                } */

        .nav-fixed #layoutSidenav #layoutSidenav_nav .sidenav {
            padding-top: 0;
        }

        /*   .nav-fixed #layoutSidenav #layoutSidenav_content {
                    padding-left: 0rem;
                    top: 3.625rem;
                } */

        /* #layoutSidenav_content {
                    margin-bottom: -3%;
                } */

        #layoutHeader {
            display: none;
        }
    </style>
</head>
<body>
    <div class="registration-container">
        <div class="card mb-4">
            <div class="card-body">
                <div class="card-header">
                    Profile
                </div>
                @if (!string.IsNullOrEmpty(TempData["SuccessMessageUser1"] as string))
                {
                    <div id="successMessageUser1" class="alert @TempData["MessageClass1"]">
                        @TempData["SuccessMessageUser1"]
                    </div>
                }

                @if (!string.IsNullOrEmpty(TempData["ErrorMessageUser1"] as string))
                {
                    <div id="errorMessageUser1" class="alert @TempData["MessageClass1"]">
                        @TempData["ErrorMessageUser1"]
                    </div>
                }

                <form method="post" id="profile" action="/@tenantName/User/Profile" enctype="multipart/form-data">
                    <div class="form-container">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @{
                                        var userName = User.FindFirstValue(ClaimTypes.Name);

                                    }
                                    <label for="FullName">Name<span class="mandatory">*</span></label>
                                    <input name="FullName" class="form-control" value="@Model.FullName" id="FullName" placeholder="Enter Name" />
                                    <input type="hidden" name="FullName" value="@Model.FullName" />
                                    <span class="text-danger errorfont" id="FullName-error"></span>
                                </div>
                                <div class="form-group">
                                    <label for="Address">Address<span class="mandatory">*</span></label>
                                    <input name="Address" class="form-control" id="Address" value="@Model.Address" placeholder="Enter Address" />
                                    <span class="text-danger errorfont" id="Address-error"></span>
                                </div>
                                <div class="form-group">
                                    @{
                                        var userEmails = User.FindFirstValue(ClaimTypes.Email);
                                    }
                                    <label for="Email">Email<span class="mandatory">*</span></label>
                                    <input type="email" name="Email" value="@Model.Email" class="form-control" id="Email" placeholder="Enter Email" disabled />
                                    <input type="hidden" name="Email" value="@Model.Email" />
                                    <span class="text-danger errorfont" id="Email-error"></span>
                                </div>
                                <div class="form-group">
                                    <label for="PhoneNumber">Phone Number<span class="mandatory">*</span></label>
                                    <input type="tel" name="PhoneNumber" class="form-control" id="PhoneNumber" value="@Model.PhoneNumber" placeholder="Enter Phone Number" />
                                    <span class="text-danger errorfont" id="PhoneNumber-error"></span>
                                </div>


                                <!-- Birth Date -->
                                <div class="form-group">
                                    <label for="DateOfBirth">Birth Date (MM/YYYY)<span class="mandatory">*</span></label>
                                    <input type="text" name="DateOfBirth" class="form-control" value="@(Model.DateOfBirth.HasValue ? Model.DateOfBirth.Value.ToString("MM/yyyy") : "")" id="DateOfBirth" placeholder="MM/YYYY" required />
                                    <span class="text-danger" id="DateOfBirth-error"></span>
                                </div>
                               
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="IsMarried">Is Married</label>
                                            <div class="form-check-inline">
                                                <input type="radio" name="IsMarried" value="true" class="form-check-input" id="IsMarriedYes" @(Model.IsMarried == true ? "checked" : "") />
                                                <label class="form-check-label" for="IsMarriedYes">Yes</label>
                                            </div>
                                            <div class="form-check-inline">
                                                <input type="radio" name="IsMarried" value="false" class="form-check-input" id="IsMarriedNo" @(Model.IsMarried == false ? "checked" : "") />
                                                <label class="form-check-label" for="IsMarriedNo">No</label>
                                            </div>
                                            <span class="text-danger" id="IsMarried-error"></span>
                                        </div>
                                    </div>

                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="IsDisabled">Is Disabled</label>
                                            <div class="form-check-inline">
                                                <input type="radio" name="IsDisabled" value="true" class="form-check-input" id="IsDisabledYes" @(Model.IsDisabled == true ? "checked" : "") />
                                                <label class="form-check-label" for="IsDisabledYes">Yes</label>
                                            </div>
                                            <div class="form-check-inline">
                                                <input type="radio" name="IsDisabled" value="false" class="form-check-input" id="IsDisabledNo" @(Model.IsDisabled == false ? "checked" : "") />
                                                <label class="form-check-label" for="IsDisabledNo">No</label>
                                            </div>
                                            <span class="text-danger" id="IsDisabled-error"></span>
                                        </div>
                                    </div>
                                </div>


                             @*    <div class="form-group">
                                    <label for="IsMarried">Is Married</label>
                                    <div class="form-check-inline">
                                        <input type="radio" name="IsMarried" value="true" class="form-check-input" id="IsMarriedYes" @(Model.IsMarried == true ? "checked" : "") />
                                        <label class="form-check-label" for="IsMarriedYes">Yes</label>
                                    </div>
                                    <div class="form-check-inline">
                                        <input type="radio" name="IsMarried" value="false" class="form-check-input" id="IsMarriedNo" @(Model.IsMarried == false ? "checked" : "") />
                                        <label class="form-check-label" for="IsMarriedNo">No</label>
                                    </div>
                                    <span class="text-danger" id="IsMarried-error"></span>
                                </div>
 *@


                            </div>
                            <div class="col-md-6 right-column">

                              

                                <div class="profile-picture-container">
                                    <label for="profilePicture">Profile Picture:</label>
                                    <div class="file-input-container">
                                        <input type="file" class="form-control-file" id="profilePicture" name="ProfilePicture" />
                                        @if (Model.ProfilePictureUrl != null)
                                        {
                                            <img src="@Model.ProfilePictureUrl" alt="Profile Picture" class="img-thumbnail" />
                                        }
                                    </div>
                                </div>

                         @*        <div class="row align-items-center">
                              
                                    <div class="col-md-6">
                                        <div class="profile-picture-container">
                                            <label for="profilePicture">Profile Picture:</label>
                                            <div class="file-input-container">
                                                <input type="file" class="form-control-file" id="profilePicture" name="ProfilePicture" />
                                            </div>
                                        </div>
                                    </div>

                             
                                    <div class="col-md-6">
                                        @if (Model.ProfilePictureUrl != null)
                                        {
                                            <img src="@Model.ProfilePictureUrl" alt="Profile Picture" class="img-thumbnail"  />
                                        }
                                    </div>
                                </div> *@


                                <div class="form-group">
                                    <label for="HouseholdSize">Household Size</label>
                                    <input type="number" name="HouseholdSize" class="form-control" value="@Model.HouseholdSize" id="HouseholdSize" placeholder="Number in Household" />
                                    <span class="text-danger" id="HouseholdSize-error"></span>
                                </div>



                                <div class="form-group">
                                    <label asp-for="EmploymentStatus">Employment Status</label>
                                    <select asp-for="EmploymentStatus" class="form-control">
                                        <option value="">Select Employment Status</option>
                                        <option value="Employed">Employed</option>
                                        <option value="Retired">Retired</option>
                                        <option value="Student">Student</option>
                                        <option value="UnableToWorkDisabled">Unable to Work/Disabled</option>
                                        <option value="UnemployedLooking">Unemployed - Looking</option>
                                        <option value="UnemployedNotLooking">Unemployed - Not Looking</option>
                                    </select>
                                    <span asp-validation-for="EmploymentStatus" class="text-danger"></span>
                                </div>

                                <div class="form-group">
                                    <label for="ZipCode">Zip Code</label>
                                    <input type="text" name="ZipCode" class="form-control" id="ZipCode" value="@Model.ZipCode" placeholder="Enter Zip Code" />
                                    <span class="text-danger" id="ZipCode-error"></span> <!-- Error message for ZIP Code -->
                                </div>

                             
                                <div class="form-group">

                                    <!-- Veteran Status Field -->
                                    <div class="form-group">
                                        <label for="IsVeteran">Veteran Status</label>
                                        <div class="form-check-inline">
                                            <input type="radio" name="IsVeteran" value="true" class="form-check-input" id="isVeteranYes" @(Model.IsVeteran == true ? "checked" : "") />
                                            <label class="form-check-label" for="isVeteranYes">Yes</label>
                                        </div>
                                        <div class="form-check-inline">
                                            <input type="radio" name="IsVeteran" value="false" class="form-check-input " id="isVeteranNo" @(Model.IsVeteran == false ? "checked" : "") />
                                            <label class="form-check-label" for="isVeteranNo">No</label>
                                        </div>
                                        <span class="text-danger" id="isVeteran-error"></span>
                                    </div>

                                    <div class="form-group">
                                        <label for="HasSchoolAgedChildren">Has School Aged Children</label>
                                        <div class="form-check-inline">
                                            <input type="radio" name="HasSchoolAgedChildren" value="true" class="form-check-input" id="HasSchoolAgedChildrenYes" @(Model.HasSchoolAgedChildren == true ? "checked" : "") />
                                            <label class="form-check-label" for="HasSchoolAgedChildrenYes">Yes</label>
                                        </div>
                                        <div class="form-check-inline">
                                            <input type="radio" name="HasSchoolAgedChildren" value="false" class="form-check-input" id="HasSchoolAgedChildrenNo" @(Model.HasSchoolAgedChildren == false ? "checked" : "") />
                                            <label class="form-check-label" for="HasSchoolAgedChildrenNo">No</label>
                                        </div>
                                        <span class="text-danger" id="HasSchoolAgedChildren-error"></span>
                                    </div>



                                </div>


                                <div id="saveButtonDiv">
                                    <button class="saveButton" type="submit" onclick="return validateForm();">Save</button>
                                </div>
                </form>
            </div>
        </div>
    </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script>

        $(document).ready(function () {
            debugger;
            $('#FullName, #Address, #Email, #PhoneNumber').on('blur change keyup', function () {
                validateField(this);
            });

            //$('#successMessageUser').fadeIn().delay(0000).fadeOut();
            $('#successMessageUser1').fadeIn().delay(2000).fadeOut();
            $('#errorMessageUser1').fadeIn().delay(2000).fadeOut();

            // $('header.page-header').remove();
        });
       
        // Validate form before submission
        function validateForm() {
            debugger;
            let isValid = true;

            // Full Name validation
            var fullName = document.getElementById('FullName').value.trim();
            if (fullName === '') {
                document.getElementById('FullName-error').innerText = 'Full Name is required.';
                isValid = false;
            } else {
                document.getElementById('FullName-error').innerText = '';
            }

            // Address validation
            var address = document.getElementById('Address').value.trim();
            if (address === '') {
                document.getElementById('Address-error').innerText = 'Address is required.';
                isValid = false;
            } else {
                document.getElementById('Address-error').innerText = '';
            }

            // Date of Birth validation (MM/YYYY format)
            var dateOfBirth = document.getElementById('DateOfBirth').value.trim();
            if (dateOfBirth === '') {
                document.getElementById('DateOfBirth-error').innerText = 'Date of Birth is required.';
                isValid = false;
            } else if (!validateDateOfBirth(dateOfBirth)) {
                document.getElementById('DateOfBirth-error').innerText = 'Date of Birth must be in MM/YYYY format and month must be between 01 and 12.';
                isValid = false;
            } else {
                document.getElementById('DateOfBirth-error').innerText = '';
            }

            // Phone number validation
            var phoneNumber = document.getElementById('PhoneNumber').value.trim();
            if (phoneNumber === '') {
                document.getElementById('PhoneNumber-error').innerText = 'Phone Number is required.';
                isValid = false;
            } else if (!isValidPhone(phoneNumber)) {
                document.getElementById('PhoneNumber-error').innerText = 'Invalid phone number format.';
                isValid = false;
            } else {
                document.getElementById('PhoneNumber-error').innerText = '';
            }

            // ZIP Code validation (Optional)
            var zipCode = document.getElementById('ZipCode').value.trim();
            var zipCodePattern = /^\d{5}(-\d{4})?$/; // Pattern for US ZIP code
            if (zipCode !== '' && !zipCodePattern.test(zipCode)) {
                document.getElementById('ZipCode-error').innerText = 'Please enter a valid US ZIP code.';
                isValid = false;
            } else {
                document.getElementById('ZipCode-error').innerText = ''; // Clear error message if valid or empty
            }

            // Household Size validation
            var householdSize = document.getElementById('HouseholdSize').value.trim();
            if (householdSize !== '') { // If value is not empty, validate it
                var householdNumber = parseInt(householdSize);
                if (isNaN(householdNumber) || householdNumber <= 0) {
                    document.getElementById('HouseholdSize-error').innerText = 'Please enter a positive number for Household Size.';
                    isValid = false;
                } else {
                    document.getElementById('HouseholdSize-error').innerText = ''; // Clear error if valid
                }
            } else {
                document.getElementById('HouseholdSize-error').innerText = ''; // Clear error if empty
            }

            return isValid;
        }

        // // Utility function to validate phone number format
        // function isValidPhone(phoneNumber) {
        //     var phoneRegex = /^(?:\+1\s?)?\(\d{3}\)\s\d{3}-\d{4}$/;
        //     return phoneRegex.test(phoneNumber);
        // }

        // function isValidPhone(phone) {
        //     var phoneRegex = /^(?:\+1\s?)?(?:\(\d{3}\)|\d{3})[\s.-]?\d{3}[\s.-]?\d{4}$/;
        //     return phoneRegex.test(phone);
        // }

        function isValidPhone(phone) {
            // Regex to validate various US phone number formats
            var phoneRegex = /^(?:\+1\s?)?(\(\d{3}\)|\d{3})?[\s.-]?\d{3}[\s.-]?\d{4}$/;

            return phoneRegex.test(phone);
        }

        // Utility function to validate Date of Birth in MM/YYYY format
        function validateDateOfBirth(dob) {
            debugger;
            // Regex for MM/YYYY format
            const re = /^(0[1-9]|1[0-2])\/\d{4}$/;
            if (!re.test(dob)) {
                return false; // Invalid format
            }

            // Extract month and year from the input
            const [month, year] = dob.split('/');
            const currentYear = new Date().getFullYear();

            // Ensure the year is not in the future and is reasonable (e.g., not earlier than 1900)
            if (year < 1900 || year > currentYear) {
                return false;
            }

            // Ensure month is between 01 and 12
            if (parseInt(month, 10) < 1 || parseInt(month, 10) > 12) {
                return false;
            }

            return true;
        }


    </script>


</body>
</html>