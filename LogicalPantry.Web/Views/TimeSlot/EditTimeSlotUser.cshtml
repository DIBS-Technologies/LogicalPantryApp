@model IEnumerable<LogicalPantry.DTOs.UserDtos.UserDto>

@{
    ViewData["Title"] = "Edit Time Slot Users";
    var tenantName = ViewBag.TenantName as string;
}


@Html.AntiForgeryToken()

<head>
    <link href="~/css/site.css" rel="stylesheet" />
    <link href="~/css/style.css" rel="stylesheet" />
    <style>
        #saveButtonDiv {
            display: flex;
            justify-content: end;
        }

        .sidenav-light {
            background-color: #fff;
            color: #1f2d41;
        }

            .sidenav-light .sidenav-menu .nav-link:hover {
                color: #0061f2;
            }

        .sidenav .sidenav-menu .nav .sidenav-menu-heading {
            padding: 1.75rem 1rem 0.75rem;
            font-size: 0.7rem;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .hidden {
            display: none;
        }

        .footer-custom {
            background-color: #fff;
            color: #1f2d41;
        }

        .sidenav-light .sidenav-menu .nav-link:hover {
            color: #0061f2;
            background-color: #f1f1f1;
            border-radius: 0.2rem;
            margin: 0rem 0.5rem 0rem 0.75rem;
            padding-left: 0.5rem !important;
        }

        .card-header {
            justify-content: center;
        }
    </style>
</head>

<main>
    <header class="page-header pb-10">
        <div class="container">
            <div class="page-header-content pt-4">
                <div class="row align-items-center justify-content-between">
                    <div class="col-auto mt-4">
                    </div>
                </div>
            </div>
        </div>
    </header>

    <div class="container mt-n10">
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-center align-items-center">
                @{
                    DateTime startDate = TempData["StartTime"] != null ? (DateTime)TempData["StartTime"] : DateTime.MinValue;
                    string formattedDate = startDate.ToString("MMM dd h tt");
                }
                @formattedDate
            </div>

            <div class="card-body">
                @if (!string.IsNullOrEmpty(TempData["SuccessMessageBatch"] as string))
                {
                    <div id="successMessageBatch" class="alert">
                        @TempData["SuccessMessageBatch"]
                    </div>
                }

                @if (!string.IsNullOrEmpty(TempData["ErrorMessageBatch"] as string))
                {
                    <div id="errorMessageBatch" class="alert">
                        @TempData["ErrorMessageBatch"]
                    </div>
                }

                <table class="table table-bordered table-hover" id="userTable" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Phone</th>
                            <th>Attended</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in Model)
                        {
                            <tr>
                                <td>@user.FullName</td>
                                <td>@user.Email</td>
                                <td>@user.PhoneNumber</td>
                                <td>
                                    <div class="checkbox-wrapper-4">
                                        <input class="inp-cbx" type="checkbox" id="allowCheckbox_@user.Id" data-user-id="@user.Id" @(user.IsAllow ? "checked" : "") />
                                        <label class="cbx" for="allowCheckbox_@user.Id">
                                            <span>
                                                <svg width="12px" height="10px">
                                                    <use xlink:href="#check-4"></use>
                                                </svg>
                                            </span>
                                        </label>
                                        <svg class="inline-svg">
                                            <symbol id="check-4" viewBox="0 0 12 10">
                                                <polyline points="1.5 6 4.5 9 10.5 1"></polyline>
                                            </symbol>
                                        </svg>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <div id="saveButtonDiv">
                    <button class="saveButton btn btn-primary" type="button" disabled>Save</button>
                </div>
            </div>
        </div>
    </div>
</main>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script>
        $(document).ready(function () {
            $(".inp-cbx").on("change", function () {
                var checkbox = $(this);
                var userId = checkbox.data("user-id");
                var isChecked = checkbox.prop("checked");

                var userStatuses = JSON.parse(sessionStorage.getItem('userStatuses') || '[]');

                var userStatus = userStatuses.find(u => u.Id === userId);
                if (userStatus) {
                    userStatus.IsAttended = isChecked;
                } else {
                    userStatuses.push({ Id: userId, IsAttended: isChecked });
                }

                sessionStorage.setItem('userStatuses', JSON.stringify(userStatuses));
                toggleSaveButton();
            });

            $(".saveButton").on("click", function () {
                var userStatuses = JSON.parse(sessionStorage.getItem('userStatuses') || '[]');
                if (userStatuses.length === 0) {
                    return;
                }

                $.ajax({
                    url: '@Url.Action(tenantName,"UpdateUserBatch", "User")',
                    type: 'POST',
                    data: JSON.stringify(userStatuses),
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    success: function (response) {
                        if (response.success) {
                            $('#successMessageBatch').text('Changes saved successfully.').fadeIn().delay(2000).fadeOut();
                            sessionStorage.removeItem('userStatuses');
                            toggleSaveButton();
                        } else {
                            $('#errorMessageBatch').text('Error saving changes.').fadeIn().delay(2000).fadeOut();
                        }
                    },
                    error: function () {
                        $('#errorMessageBatch').text('Error saving changes.').fadeIn().delay(2000).fadeOut();
                    }
                });
            });

            function toggleSaveButton() {
                var userStatuses = JSON.parse(sessionStorage.getItem('userStatuses') || '[]');
                if (userStatuses.length > 0) {
                    $(".saveButton").prop("disabled", false);
                } else {
                    $(".saveButton").prop("disabled", true);
                }
            }

            toggleSaveButton(); // Initialize the save button state on page load
        });
    </script>
}
