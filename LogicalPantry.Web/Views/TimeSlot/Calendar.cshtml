@{
    var tenantName = ViewBag.TenantName as string;
    var pagename = ViewBag.PageName as string;
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>Calendar</title>

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/css/jquery-calendar.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.css">
    @*  <link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css" rel="stylesheet"> *@

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="~/css/StyleSheet.css">
   @*  <script src="~/lib/jquery/dist/jquery.min.js"></script> *@
   @*  <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script> *@


    <style>


        .calendar-header {
            margin-bottom: 20px;
           /*  display: flex;
            justify-content: end; */
            align-items: center;
        }

        #layoutSidenav{
        margin-top: -3%;
        }
   

        /* New CSS */
        .dropdown select {
            display: inline-block;
            width: 200px;
            margin-right: 10px; 
        }

        .btn-success {
            margin-left: 0; 
        }

        .calendar-header .d-flex {
            align-items: center;
            gap: 10px;
        }

    
        /* Button hover effect */
        .btn.btn-sm.btn-light.btn-move-calendar:hover {
            background-color: #f0f0f0;
            border-color: #333;
            color: black;
        }

        .btn.btn-sm.btn-default.btn-move-calendar {
            background-color: white;
            border: 2px solid black;
            padding: 10px 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 4px;
        }

        .calendar-categories {
            height: 20px;
        }

        .nav-fixed #layoutSidenav #layoutSidenav_nav .sidenav {
            padding-top: 0rem;
        }

        .page-header > .container-fluid:first-of-type {
            display: flex;
            justify-content: center;
            margin-bottom: -10px;
          
        }


      

        .page-header-compact .page-header-content .page-header-title {
            font-size: 1.5rem;
        }

        .calendar-header {
            margin: 20px auto;
           
           
            align-items: center;
            width: 100%;
           /*  max-width: 1200px; */
            padding-left: 6rem;
            padding-right: 5rem;
        }

        .container-fluid {
            margin-left: 58px;
        }

        .container, .container-fluid, .container-sm, .container-md, .container-lg, .container-xl, .container-xxl {
            padding-left: 0rem; 
            padding-right: 0rem;
        }

        .container-fluid {
            max-width: 100%;
            margin: 10px auto;
        }

        html body {
            font-family: Arial, sans-serif;
        }

        footer {
            background-color: #eff3f9;
            color: #6c757d;
            text-align: center;
            padding: 1rem;
            width: 100%;
            position: relative;
            bottom: 0;
            flex-shrink: 0; /* Prevent footer from shrinking */
        }

        
        .pt-2, .py-2 {
            padding-top: 1rem !important;
        }

        .page-header-title {
            font-size: larger;
        }

        .page-header > .container-fluid:first-of-type {
            display: flex;
            justify-content: center;
            margin-bottom: 5px;
        }

        .mb-3 {
            margin-top: 5% !important;
        }

        /* .calendar-timeline
        {
            padding-top: 29px;
           
        } */

        .calendar .calendar-events .calendar-event {
            border-radius: 15px;
        }
       
    </style>
</head>

<body>
    <div class="container-fluid">
        <div class="calendar-header">
            @*  <h3>TimeSlot </h3> *@
            <div class="d-flex align-items-center" style="
                 display: flex;
                 justify-content: end;">            
                <button type="button" class="btn btn-success" id="addEventBtn">Add Event</button>
            </div>

        <div class="row">
            <div class="col">
                <div id="calendar"></div>
            </div>
        </div>

    
        <div class="modal fade" id="eventModal" tabindex="-1" role="dialog" aria-labelledby="eventModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="eventModalLabel">Event Details</h5>
                    </div>
                    <div class="modal-body">
                        <form id="eventForm" method="post">
                            <div class="form-group">
                                <label for="eventTitle">Title:</label>
                                    <input type="text" class="form-control" id="eventTitle" name="Title" placeholder="Please add title" required>
                                <span class="text-danger validation-message" id="titleError"></span>
                            </div>
                            <div class="form-group">
                                <label for="eventStart">Start Date and Time:</label>
                                <input type="datetime-local" class="form-control" id="eventStart" name="StartDateTime" required>
                                <span class="text-danger validation-message" id="startError"></span>
                            </div>
                            <div class="form-group">
                                <label for="eventEnd">End Date and Time:</label>
                                <input type="datetime-local" class="form-control" id="eventEnd" name="EndDateTime" required>
                                <span class="text-danger validation-message" id="endError"></span>
                            </div>
                                 <div class="form-group">
                                    <label for="eventType">Event Type:</label>
                                    <select class="form-control" id="eventType" name="Type" required>
                                        <option value="">Select Type</option>
                                        <option value="Food Pickup">Food Pickup</option>
                                        <option value="Volunteer">Volunteer</option>
                                        <option value="Appointment">Appointment</option>
                                    </select>
                                    <span class="text-danger validation-message" id="typeError"></span>
                                </div>
                                <div class="form-group">
                                    <label for="eventMaxUsers">Maximum Number of Users:</label>
                                    <input type="number" class="form-control" id="eventMaxUsers" name="MaxUsers" min="1" placeholder="Enter maximum number of users"  required>
                                    <span class="text-danger validation-message" id="maxUsersError"></span>
                                </div> 
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" id="saveEventBtn">Save</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

 


    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/moment.js/moment-with-locales.min.js"></script>
    <script src="~/jquery.touchswipe/jquery.touchswipe.min.js"></script>
    <link rel="stylesheet" href="~/css/jquery-calendar.min.css">
    <script src="~/js/jquery-calendar.min.js"></script>
        
            <script>
                $(document).ready(function () {
                    debugger;
                    var events = @Html.Raw(Json.Serialize(Model.Events));
                     //var buttonHtml = '<button type="button" class="btn btn-success" id="addEventBtn">Add Event</button>';
                    // $('.nav-fixed .container').append(buttonHtml);

            $('#calendar').Calendar({
                locale: 'en',
                weekday: {
                    timeline: {
                        intervalMinutes: 60,
                        fromHour: 7, // Adjusted from 9 to 7
                        toHour: 23
                    }
                },
                events: events,
                view: 'week',                    
                defaultView: {
                    largeScreen: 'week',
                    smallScreen: 'day',
                    smallScreenThreshold: 1000
                },
                weekday: {
                    timeline: {
                        fromHour: 7,
                        toHour: 23,
                        intervalMinutes: 60,
                        format: 'HH:mm',
                        heightPx: 50,
                        autoResize: true
                    },
                    dayline: {
                        weekdays: [0, 1, 2, 3, 4, 5, 6],
                        format: 'MM/DD',
                        heightPx: 31,
                        month: {
                            format: 'MMMM YYYY',
                            heightPx: 30,
                            weekFormat: 'w'
                        }
                    }
                },
                month: {
                    format: 'MMMM YYYY',
                    heightPx: 31,
                    weekline: {
                        format: 'w',
                        heightPx: 80
                    },
                    dayheader: {
                        weekdays: [0, 1, 2, 3, 4, 5, 6],
                        format: 'dddd',
                        heightPx: 30
                    },
                    day: {
                        format: 'MM/DD'
                    }
                },
                unixTimestamp: moment().format('X'),
                event: {
                    hover: {
                        delay: 5000000
                    },

                },
               categories: {
                enable: true,
                hover: {
                  delay: 500
                }
              }

            }).init();

            $('#addEventBtn').on('click', function () {
                $('#eventModal').modal('show');
            });

           

            $('#calendar').on('Calendar.event-click', function (event, instance, elem, evt) {
                debugger;
                // $('#calendar-modal').attr
                var startTime = evt.start;
                var endTime = evt.end;
                var timeSlotName = evt.title;

                // Convert Unix timestamps to ISO format
                var startTimeISO = new Date(startTime * 1000).toISOString();
                var endTimeISO = new Date(endTime * 1000).toISOString();

                // Get time slot ID using the extracted details
                $.ajax({
                    url: 'GetTimeSlotId',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        StartTime: startTimeISO,
                        EndTime: endTimeISO,
                        TimeSlotName: timeSlotName
                    }),
                    
                        success: function (response) {
                            if (response && response.timeSlotId) {
                                // Call the EditTimeSlotUser method using an HTTP GET request
                              window.location.href = 'EditTimeSlotUser?id=' + response.timeSlotId;                            

                            } else {
                                alert('Time slot not found.');
                            }
                        },
                    error: function (xhr, status, error) {
                        alert('Error retrieving time slot ');
                    }
                });
            });


            function handleSelectChange() {
                var selectedOption = $('#eventSelect option:selected');
                var selectedEventId = selectedOption.val();
                var selectedEventTitle = selectedOption.data('title');
            }
                



            $('#saveEventBtn').on('click', function (e) {
                debugger;
                 e.preventDefault();

                // Clear previous validation messages
                $('.validation-message').text('');
                    var eventType = $("#eventType").val();
                    var maxUsers = $("#eventMaxUsers").val();
                // Validation flags
                let isValid = true;

                // Validate Title
                const title = $('#eventTitle').val().trim();
                if (title === '') {
                    $('#titleError').text('Title is required.');
                    isValid = false;
                }
                    // Validate event type (dropdown must not be empty)
                    if (eventType === "") {
                        $("#typeError").text("Event type is required.");
                        isValid = false;
                    }

                    // Validate max users (must be a positive number and not empty)
                    if (maxUsers === "") {
                        $("#maxUsersError").text("Maximum number of users is required.");
                        isValid = false;
                    } else if (maxUsers <= 0) {
                        $("#maxUsersError").text("Maximum number of users must be a positive number.");
                        isValid = false;
                    }
                    // Get today's date without time
                    const now = new Date();
                    now.setHours(0, 0, 0, 0); // Reset time to 00:00:00

                    // Validate Start Date (only the date, not the time)
                     const startDateTime = new Date($('#eventStart').val().trim());
                    const startDateTimeInput1 = $('#eventStart').val();
                    const startDateTimeInput2 = new Date(startDateTimeInput1);
                    startDateTime.setHours(0, 0, 0, 0); // Reset time to 00:00:00


                    if (isNaN(startDateTime)) {
                        $('#startError').text('Start date is required.');
                        isValid = false;
                    } else if (startDateTime < now) {
                        $('#startError').text('Please select a future date.');
                        isValid = false;
                    } else {
                     
                        const startHours = startDateTimeInput2.getHours();
                        const startMinutes = startDateTimeInput2.getMinutes();

                        // Validate that the time is after 7:00 AM
                        if (startHours < 7 || (startHours === 7 && startMinutes < 0)) {
                            $('#startError').text('Please select a start time after 7 AM.');
                            isValid = false;
                        }
                    }
                
                debugger;

                    // Validate End Date (only the date, not the time)
                    const endDateTime = new Date($('#eventEnd').val().trim());
                    const endDateTimeInput1 = $('#eventEnd').val();
                    const endDateTimeInput2 = new Date(endDateTimeInput1);
                    endDateTime.setHours(0, 0, 0, 0); // Reset time to 00:00:00
                    if (startDateTime.getTime() !== endDateTime.getTime()) {
                        $('#endError').text('Please add a single day entry only. The end date must be the same day.');
                        isValid = false;
                    }
                    if (isNaN(endDateTime)) {
                        $('#endError').text('End date is required.');
                        isValid = false;
                    } else if (endDateTime < now) {
                        $('#endError').text('Please select a future date.');
                        isValid = false;
                    }  else if (endDateTime < startDateTime) {
                        debugger;
                        $('#endError').text('End date must be after the start date.');
                        isValid = false;
                    } else {
                        const endHours = endDateTimeInput2.getHours();
                        const endMinutes = endDateTimeInput2.getMinutes();
                        const startHours = startDateTimeInput2.getHours();
                        const startMinutes = startDateTimeInput2.getMinutes();
                        // Validate that the end time is after the start time
                        if (endHours < startHours || (endHours === startHours && endMinutes <= startMinutes)) {
                            $('#endError').text('End time should be greater than start time.');
                            isValid = false;
                        } else if (startDateTime.getTime() !== endDateTime.getTime()) {
                            $('#endError').text('Please add a single day entry only. The end date must be the same day.');
                            isValid = false;
                        }
                        
                    }
                        
                   
               
                   
                //If all fields are valid, submit the form
                if (isValid) {
                    debugger;
                        var eventData = {
                            timeSlotName: $('#eventTitle').val(),
                            startTime: $('#eventStart').val(),
                            endTime: $('#eventEnd').val(),
                            eventType: $('#eventType').val(),
                            maxNumberOfUsers: $("#eventMaxUsers").val(),
                            
                        };

                        $.ajax({
                            url: 'AddEvent', // Ensure the URL is correct
                            type: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify(eventData),
                            success: function (response) {
                                if (response.success) {

                                    // alert('sucessfully  1');
                                    // Example URL based on response data
                                    var redirectUrl = '/@tenantName/TimeSlot/Calendar';
                                    window.location.href = redirectUrl;
                                } else {
                                    $("#maxUsersError").css("color", "red").text("Entry is overlapping, Please add the correct event.");

                                }
                            },
                            error: function (xhr, status, error) {
                                console.error('Error adding event:', error);
                                $("#maxUsersError").css("color", "red").text("Entry is overlapping, Please add the correct event.");

                            }
                        });
                    //$('#eventForm').submit(); // Submit the form or call your saving logic here
                }
            });
         });
    </script>


    <style>
            .calendar-timeline{             
                padding-top: 31px;
                margin-top: 70px;
            
            }
    </style>
</body>

</html>
