@using System.Security.Claims

@{
    var tenantName = ViewBag.TenantName as string;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Tenant Information</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/css/Style.css">
    <link rel="stylesheet" href="~/css/StyleSheet.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

    <style>
        html body {
            overflow: hidden;
        }

        .card {
            width: 100%;
            max-width: 800px;
            margin: auto;
        }

        #layoutSidenav {
            margin-top: -3%;
        }


        .container-fluid {
            max-width: 90%;
            margin: 10px auto;
        }

        .card-header {
            text-align: center;
            font-weight: 500;
        }

        .form-group {
            margin-bottom: 1rem;
        }

            .form-group label {
                display: block;
                margin-bottom: 0.5rem;
            }

            .form-group .form-control {
                width: 100%;
            }

        .saveButton, .btn-custom {
            background-color: #1A2A52;
            color: white;
            border-radius: 5px;
            border: none;
            font-size: 1rem;
            padding: 0.5rem 1rem;
            margin-top: 1rem;
            display: flex;
            align-items: center;
        }

        .saveButton {
            margin-top: 1rem;
        }

        .btn-custom {
            display: inline-flex;
            align-items: center;
            padding: 0.5rem 1rem;
        }

            .btn-custom svg {
                margin-right: 0.5rem;
            }

        #saveButtonDiv {
            display: flex;
            justify-content: end;
        }

        .form-control-file {
            width: 100%;
            max-width: 200px;
        }

        .form-group.row {
            margin-bottom: 1rem;
        }

            .form-group.row .col-form-label {
                margin-bottom: 0;
                text-align: right;
            }

            .form-group.row .col-sm-10 {
                padding-left: 0;
            }

        .form-group input, .form-group select {
            width: 100%;
        }

        @@media (max-width: 768px) {
            .form-group {
                margin-left: 0;
            }
        }

        .nav-fixed #layoutSidenav #layoutSidenav_nav .sidenav {
            padding-top: 0rem;
        }

        .container {
            padding: 2rem;
        }

        .card-header {
            padding: 1.5%;
        }

        .page-header-content {
            display: flex;
            justify-content: center;
        }



        .page-header > .container-fluid:first-of-type {
            max-height: 100vh;
            /*   padding: 1rem; */
            margin-bottom: -10px;
        }

        .page-header-compact .page-header-content .page-header-title {
            font-size: 1.5rem;
        }


        #tenantInfoContainer {
            padding-top: 0;
        }

        #tenantInfoContainer {
            margin-top: -3%;
            padding-top: 0px;
        }

        .container-fluid {
            margin-left: 60px;
        }

        footer {
            background-color: #eff3f9;
            color: #6c757d;
            text-align: center;
            padding: 1rem;
            width: 100%;
            position: relative;
            bottom: 0;
            flex-shrink: 0;
        }

        #layoutSidenav_content {
            margin-bottom: -4%;
        }

        .form-group {
            margin-bottom: 1rem;
        }

            .form-group label {
                display: block;
                margin-bottom: 0.5rem;
            }

            .form-group .form-control,
            .form-group .form-control-file {
                width: 100%;
                margin-bottom: 0.5rem;
            }

        .page-header-content {
            margin-left: 18%;
        }


        .page-header-compact .page-header-content {
            padding: 0;
            padding-top: 10px;
        }

        .page-header-content {
            margin-left: 18%;
        }


        .page-header-compact .page-header-content {
            padding: 0;
            padding-top: 10px;
        }

        .page-header > .container-fluid:first-of-type {
            max-height: 100vh;
            /* padding: 1rem; */
            margin-bottom: 5px;
        }

        .mb-3 {
            margin-top: 2%;
        }

    </style>
</head>
<body>


    <div class="container mt-4" id="tenantInfoContainer">
        <div class="row">
            <div class="col-lg-12">
                <div class="card mb-4">
                    <div class="card-header">
                        Edit Tenant Information
                    </div>
                    <div class="card-body">
                        @if (!string.IsNullOrEmpty(TempData["SuccessMessageInfo"] as string))
                        {
                            <div id="successMessageUser" class="alert @TempData["MessageClass"]">
                                @TempData["SuccessMessageInfo"]
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(TempData["ErrorMessageInfo"] as string))
                        {
                            <div id="errorMessageUser" class="alert @TempData["MessageClass"]">
                                @TempData["ErrorMessageInfo"]
                            </div>
                        }

                        <form method="post" id="createUser" action="/@tenantName/Information/AddTenant" enctype="multipart/form-data">
                            <div class="form-group">
                                <label for="logo">Logo</label>
                                <input type="file" name="LogoFile" class="form-control-file" id="logo" placeholder="Enter Logo" />
                                <span class="text-danger" id="logo-error"></span>
                            </div>
                            <div class="form-group">
                                <label for="PageName">Page Name <span class="mandatory"></span></label>
                                <input name="PageName" class="form-control" id="name" value="@Model.PageName" placeholder="Enter Page Name With Extension" />
                                <span class="text-danger" id="name-error"></span>
                            </div>
                            <div class="form-group">
                                <label for="TenantDisplayName">Tenant Display Name <span class="mandatory"></span></label>
                                <input name="TenantDisplayName" class="form-control" id="TenantDisplayName" value="@Model.TenantDisplayName" placeholder="Enter Tenant Display Name" />
                                <span class="text-danger" id="name-error"></span>
                            </div>
                            <div class="form-group">
                                <label for="paypalId">Paypal ID <span class="mandatory"></span></label>
                                <input type="email" name="PaypalId" value="@Model.PaypalId" class="form-control" id="paypalId" placeholder="Enter Paypal Email" />
                                <span class="text-danger" id="paypalId-error"></span>
                            </div>

                            <div class="form-group">
                                <label for="timeZone">Time Zone <span class="mandatory"></span></label>
                                <select name="Timezone" class="form-control" id="timeZone"></select>
                                <span class="text-danger" id="timeZone-error"></span>
                            </div>
                            <div id="saveButtonDiv">
                                <button class="btn-custom saveButton" type="submit" onclick="return validateForm();">
                                    Save
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>

    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

    <script src="~/js/timezones.full.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <!-- Include Moment Timezone -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.40/moment-timezone-with-data.min.js"></script>

    <script>
        $(document).ready(function () {
            debugger;
            $('#successMessageUser').fadeIn().delay(2000).fadeOut();
            $('#errorMessageUser').fadeIn().delay(2000).fadeOut();

            var pageClass = $('body').attr('class');

            if (pageClass === 'nav-fixed') {
                $('.page-header-title').text('Tenant Information');
                $('.page-header-title').addClass('custom-style');
            }
            populateTimeZones();
            $('#name').on('blur change keyup', validateName);
            $('#paypalId').on('blur change keyup', validatePaypalId);
            //$('#timeZone').on('blur change', validateTimeZone);
            // $('#logo').on('change', validateLogo);

            $('.saveButton').on('click', function () {
                if (validateForm()) {
                    $(".saveButton").prop("disabled", false);

                }
            });
        });

        // //i want to show here only us base time zones only //next serch bar in drop down
        // function populateTimeZones() {
        //     var timezones = moment.tz.names();
        //     var $timeZoneSelect = $('#timeZone');
        //     $.each(timezones, function (index, timezone) {
        //         $timeZoneSelect.append($('<option>', { value: timezone, text: timezone }));
        //     });
        //     $timeZoneSelect.val('@Model.Timezone');
        // }

        // function populateTimeZones() {

        //     //var timezones = moment.tz.zonesForCountry('Us');
        //     var timezones = moment.tz.names();
        //     var usTimezones = timezones.filter(function (timezone) {
        //         return timezone.startsWith('US/');
        //     });

        //     var $timeZoneSelect = $('#timeZone');
        //     $.each(usTimezones, function (index, timezone) {
        //         $timeZoneSelect.append($('<option>', { value: timezone, text: timezone }));
        //     });
        //     $timeZoneSelect.val('@Model.Timezone');
        //     $('#timeZone').timezones({
        //     guessUserTimezone:true,
        //     defaultRegion:1024
        //     });

        // }

        // function populateTimeZones() {
        //     // Get all U.S. time zones
        //     var usTimezones = moment.tz.zonesForCountry('US');

        //     // Populate the dropdown
        //     var $timeZoneSelect = $('#timeZone');
        //     $timeZoneSelect.empty(); // Clear existing options

        //     $.each(usTimezones, function (index, timezone) {
        //         // Get the current offset for this time zone
        //         var offset = moment.tz(timezone).format('Z'); // Get the offset in +HH:mm format
        //         var gmtOffset = offset.replace(':', ''); // Remove the colon for GMT format
        //         var displayText = ' (GMT' + gmtOffset + ')' + timezone;

        //         // Add each time zone to the dropdown
        //         $timeZoneSelect.append($('<option>', { value: timezone, text: displayText }));
        //     });

        //     // Set the selected value if needed
        //     $timeZoneSelect.val('@Model.Timezone'); 

           
        // }

       


        function populateTimeZones() {
            debugger;
            var $timeZoneSelect = $('#timeZone');
            $timeZoneSelect.empty(); // Clear existing options
           // $timeZoneSelect.append($('<option>', { value: 'NULL', text: '-- Select --' }));
            var usTimezones = [
                { value: "NULL", text: "-- Select --" },
                { value: "(GMT-0500) Eastern Time (US & Canada)", text: "(GMT-0500) Eastern Time (US & Canada)" },
                { value: "(GMT-0600) Central Time (US & Canada)", text: "(GMT-0600) Central Time (US & Canada)" },
                { value: "(GMT-0700) Mountain Time (US & Canada)", text: "(GMT-0700) Mountain Time (US & Canada)" },
                { value: "(GMT-0700) Arizona", text: "(GMT-0700) Arizona" },
                { value: "(GMT-0800) Pacific Time (US & Canada)", text: "(GMT-0800) Pacific Time (US & Canada)" },
                { value: "(GMT-0900) Alaska", text: "(GMT-0900) Alaska" },
                { value: "(GMT-1000) Hawaii-Aleutian", text: "(GMT-1000) Hawaii-Aleutian" },
                { value: "(GMT-1000) Hawaii", text: "(GMT-1000) Hawaii" },
                { value: "(GMT-0500) Indiana (East)", text: "(GMT-0500) Indiana (East)" }
            ];

            // Populate the dropdown with the hard-coded time zones
            $.each(usTimezones, function (index, timezone) {
                $timeZoneSelect.append($('<option>', { value: timezone.value, text: timezone.text }));
            });

            var savedTimezone = '@Html.Raw(Model.Timezone)';
           // var savedTimezone = '@Model.Timezone'.trim();
            console.log("Saved Timezone:", savedTimezone);

            // Check if the saved timezone is empty
            if (savedTimezone === '' || !usTimezones.some(tz => tz.value === savedTimezone)) {
                // Set to default value
                $timeZoneSelect.val('NULL').change();
            } else {
                // Set the selected value to the saved timezone
                $timeZoneSelect.val(savedTimezone).change();
            }

            // Check if the option was set
            var selectedOption = $timeZoneSelect.find('option:selected').text();
            console.log("Selected Option:", selectedOption);
        }




        // function validateLogo() {
        //     var logoFile = $("#logo").val();
        //     if (!logoFile) {
        //         $("#logo-error").text("Logo is required.").show();
        //         return false;
        //     } else {
        //         $("#logo-error").text("").hide();
        //         return true;
        //     }
        // }

        // function validateName() {
        //     var name = $("#name").val();
        //     if (name.trim() === "") {
        //         $("#name-error").text("Name is required.").show();
        //         return false;
        //     } else {
        //         $("#name-error").text("").hide();
        //         return true;
        //     }
        // }

        // function validatePaypalId() {
        //     var paypalId = $("#paypalId").val();
        //     if (paypalId.trim() === "") {
        //         $("#paypalId-error").text("Paypal ID is required.").show();
        //         return false;
        //     } else if (!isValidEmail(paypalId)) {
        //         $("#paypalId-error").text("Invalid Paypal ID format.").show();
        //         return false;
        //     } else {
        //         $("#paypalId-error").text("").hide();
        //         return true;
        //     }
        // }

        // function validateTimeZone() {
        //     var timeZone = $("#timeZone").val();
        //     if (!timeZone || timeZone.trim() === "") {
        //         $("#timeZone-error").text("Time Zone is required.").show();
        //         return false;
        //     } else {
        //         $("#timeZone-error").text("").hide();
        //         return true;
        //     }
        // }

        function validateForm() {
            var isValid = true;
            // isValid = validateLogo() && isValid;
           // isValid = validateName() && isValid;
           // isValid = validatePaypalId() && isValid;
           // isValid = validateTimeZone() && isValid;
            $(".saveButton").prop("disabled", !isValid);
            return isValid;
        }

        function isValidEmail(email) {
            var emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
            return emailRegex.test(email);
        }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    @*  <script src="~/js/scripts.js"></script> *@
</body>
</html>
